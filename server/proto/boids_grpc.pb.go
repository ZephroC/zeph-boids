// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: proto/boids.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Boids_CreateSession_FullMethodName = "/boids.Boids/CreateSession"
	Boids_StreamSession_FullMethodName = "/boids.Boids/StreamSession"
)

// BoidsClient is the client API for Boids service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BoidsClient interface {
	CreateSession(ctx context.Context, in *BoidsRequest, opts ...grpc.CallOption) (*BoidsConfig, error)
	StreamSession(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[BoidsSessionRequest, BoidFrame], error)
}

type boidsClient struct {
	cc grpc.ClientConnInterface
}

func NewBoidsClient(cc grpc.ClientConnInterface) BoidsClient {
	return &boidsClient{cc}
}

func (c *boidsClient) CreateSession(ctx context.Context, in *BoidsRequest, opts ...grpc.CallOption) (*BoidsConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoidsConfig)
	err := c.cc.Invoke(ctx, Boids_CreateSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boidsClient) StreamSession(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[BoidsSessionRequest, BoidFrame], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Boids_ServiceDesc.Streams[0], Boids_StreamSession_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[BoidsSessionRequest, BoidFrame]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Boids_StreamSessionClient = grpc.BidiStreamingClient[BoidsSessionRequest, BoidFrame]

// BoidsServer is the server API for Boids service.
// All implementations must embed UnimplementedBoidsServer
// for forward compatibility.
type BoidsServer interface {
	CreateSession(context.Context, *BoidsRequest) (*BoidsConfig, error)
	StreamSession(grpc.BidiStreamingServer[BoidsSessionRequest, BoidFrame]) error
	mustEmbedUnimplementedBoidsServer()
}

// UnimplementedBoidsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBoidsServer struct{}

func (UnimplementedBoidsServer) CreateSession(context.Context, *BoidsRequest) (*BoidsConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (UnimplementedBoidsServer) StreamSession(grpc.BidiStreamingServer[BoidsSessionRequest, BoidFrame]) error {
	return status.Errorf(codes.Unimplemented, "method StreamSession not implemented")
}
func (UnimplementedBoidsServer) mustEmbedUnimplementedBoidsServer() {}
func (UnimplementedBoidsServer) testEmbeddedByValue()               {}

// UnsafeBoidsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BoidsServer will
// result in compilation errors.
type UnsafeBoidsServer interface {
	mustEmbedUnimplementedBoidsServer()
}

func RegisterBoidsServer(s grpc.ServiceRegistrar, srv BoidsServer) {
	// If the following call pancis, it indicates UnimplementedBoidsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Boids_ServiceDesc, srv)
}

func _Boids_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoidsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoidsServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Boids_CreateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoidsServer).CreateSession(ctx, req.(*BoidsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Boids_StreamSession_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BoidsServer).StreamSession(&grpc.GenericServerStream[BoidsSessionRequest, BoidFrame]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Boids_StreamSessionServer = grpc.BidiStreamingServer[BoidsSessionRequest, BoidFrame]

// Boids_ServiceDesc is the grpc.ServiceDesc for Boids service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Boids_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "boids.Boids",
	HandlerType: (*BoidsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSession",
			Handler:    _Boids_CreateSession_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamSession",
			Handler:       _Boids_StreamSession_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/boids.proto",
}
